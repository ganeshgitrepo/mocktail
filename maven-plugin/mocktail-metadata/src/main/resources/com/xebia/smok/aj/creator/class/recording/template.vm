import static junit.framework.Assert.assertTrue;

import java.io.File;

import com.xebia.smok.SmokContainer;
import com.xebia.smok.SmokContext;
import com.xebia.smok.repository.ObjectRepository;
import com.xebia.smok.util.UniqueIdGenerator;

public aspect RecorderAspect$className {

	ObjectRepository objectRepository = SmokContainer.getObjectRepository();
	UniqueIdGenerator uniqueIdGenerator = SmokContainer.getUniqueIdGenerator();
	
	String fqcn = "$fqcn";
	// Get the Directory path form SmokContext where we have to store the
	// file
	String recordingDirectoryPath = "$recordingDirectory";
	pointcut callPointcut() : call(* $fqcn.*(..));
	
	
	Object around() : callPointcut() {
		
		String fileSeparator = File.separator;
		//SmokContext.getSmokContext().getRecordingDirectory();
		recordingDirectoryPath = "$recordingDirectory";

		// Verifying if root recording directory where all recordings exist is already their or not
		assertTrue("The root recordings directory doesn't exists " + recordingDirectoryPath, (new File(recordingDirectoryPath)).exists());
		
		//Recording directory will also have fqcn
		recordingDirectoryPath = recordingDirectoryPath + fileSeparator
						+ fqcn.replaceAll("\\.", fileSeparator);

		//Verify if recording directory exists or not if doesn't create the directory
		if (!(new File(recordingDirectoryPath)).exists()) {
			(new File(recordingDirectoryPath)).mkdirs();
		}
		
		// Create the unique id of param objects to be recorded
		String recordingFileName = uniqueIdGenerator.getUniqueId(thisJoinPoint.getArgs())	+ "";		
		
		
		Object objectToBeRecorded = null;
		// Get the object to be recorded
		// Ask Recorder to save the recording file
		if (!objectRepository.objectAlreadyExist(recrodingFileName,
				recordingDirectoryPath)) {
			System.out.println("Recording not already in place so doing the recording");
			objectToBeRecorded = proceed();
			objectRepository.saveObject(objectToBeRecorded, recrodingFileName,
					recordingDirectoryPath);
		} else {
			System.out.println("object already exists so not saving it");
			objectToBeRecorded = objectRepository.getObject(recrodingFileName, recordingDirectoryPath);
		}
		
		return objectToBeRecorded;
	}
}
